var start_time=undefined;
var finish_time=undefined;
var elapse_time=undefined;
var N=undefined;
var BLOCKS=undefined;
var THETA=undefined;
var interactions=undefined;
var block_size=undefined;
;;
//#pragma sequential
var start_time = new Date().getTime();var finish_time;var elapse_time;var N = 524288;var BLOCKS = 8;var THETA = 2;var interactions = 0;/* possible parvar */
var block_size = Math.floor(N / BLOCKS);;__job.data.vars['start_time'].value=start_time;
__job.data.vars['finish_time'].value=finish_time;
__job.data.vars['elapse_time'].value=elapse_time;
__job.data.vars['N'].value=N;
__job.data.vars['BLOCKS'].value=BLOCKS;
__job.data.vars['THETA'].value=THETA;
__job.data.vars['interactions'].value=interactions;
__job.data.vars['block_size'].value=block_size;
return;
// Constructors
function Vect(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
}function Box(coords, sz) {
    this.coords = coords;
    this.sz = sz;
}function Cmass(m, coords) {
    this.m = m;
    this.coords = coords;
}function make_main_tree(parts) {
    var x0 = 1e6;
    y0 = x0;
    z0 = x0;
    var dx = -1e6;
    dy = dx;
    dz = dx;
    var pa = [];
    for (var pi = 0; pi < parts.length; pi++) {
        pa = parts[pi];
        if (pa[0] < x0) x0 = pa[0];
        if (pa[1] < y0) y0 = pa[1];
        if (pa[2] < z0) z0 = pa[2];
        if (pa[0] > dx) dx = pa[0];
        if (pa[1] > dy) dy = pa[1];
        if (pa[2] > dz) dz = pa[2];
    }
    dx -= x0;
    dy -= y0;
    dz -= z0;
    return make_tree(parts, [ [ x0, y0, z0 ], [ dx, dy, dz ] ]);
}function make_tree(part, cell_box) {
    var desc = [ 0 ];
    var x0 = cell_box[0][0];
    var y0 = cell_box[0][1];
    var z0 = cell_box[0][2];
    var dx = cell_box[1][0];
    var dy = cell_box[1][1];
    var dz = cell_box[1][2];
    var hdx = dx / 2;
    var hdy = dy / 2;
    var hdz = dz / 2;
    var zpart = [ [], [] ];
    var ypart = [ [], [], [], [] ];
    var xpart = [ [], [], [], [], [], [], [], [] ];
    if (part.length == 1) {
        return [ [ 1, new Cmass(part[0][6], new Vect(part[0][0], part[0][1], part[0][2])), [ new Vect(0, 0, 0), new Vect(0, 0, 0), new Vect(0, 0, 0) ], new Box(new Vect(cell_box[0][0], cell_box[0][1], cell_box[0][2]), new Vect(cell_box[1][0], cell_box[1][1], cell_box[1][2])), [ -1 ] ] ];
    }
    // Split particles into 3D octants
    // z axis
    var pa = [];
    for (var hi = 0; hi < part.length; hi++) {
        pa = part[hi];
        if (pa[2] >= z0 + hdz) zpart[1].push(pa); else zpart[0].push(pa);
    }
    // y axis
    for (var hj = 0; hj < 2; hj++) {
        for (var hz = 0; hz < zpart[hj].length; hz++) {
            pa = zpart[hj][hz];
            if (pa[0] >= x0 + hdx) ypart[hj * 2 + 1].push(pa); else ypart[hj * 2].push(pa);
        }
    }
    // x axis
    for (var hj = 0; hj < 4; hj++) {
        for (var hz = 0; hz < ypart[hj].length; hz++) {
            pa = ypart[hj][hz];
            if (pa[1] >= y0 + hdy) xpart[hj * 2 + 1].push(pa); else xpart[hj * 2].push(pa);
        }
    }
    var xhalf = x0 + hdx;
    var yhalf = y0 + hdy;
    var zhalf = z0 + hdz;
    var corners = [ [ x0, y0, z0 ], [ x0, yhalf, z0 ], [ xhalf, y0, z0 ], [ xhalf, yhalf, z0 ], [ x0, y0, zhalf ], [ x0, yhalf, zhalf ], [ xhalf, y0, zhalf ], [ xhalf, yhalf, zhalf ] ];
    var l;
    var children = [];
    for (var h = 0; h < xpart.length; h++) {
        if (xpart[h].length > 0) {
            l = desc.length;
            desc = desc.concat(make_tree(xpart[h], [ corners[h], [ hdx, hdy, hdz ] ]));
            children.push(desc[l]);
        }
    }
    var child_pos = [];
    var desc_nos = [];
    var desc_no = 1;
    var total_mass = 0;
    var ch = [];
    var mx = 0, my = 0, mz = 0;
    for (h = 0; h < children.length; h++) {
        ch = children[h];
        desc_nos[h] = ch[0];
        child_pos[h] = desc_no;
        desc_no += desc_nos[h];
        total_mass += ch[1].mass();
        mx += ch[1].mass() * ch[1].cpos().x;
        my += ch[1].mass() * ch[1].cpos().y;
        mz += ch[1].mass() * ch[1].cpos().z;
    }
    mx = mx / total_mass;
    my = my / total_mass;
    mz = mz / total_mass;
    var mv = new Vect(mx, my, mz);
    //    console.log(child_pos);
    //    console.log(desc_no);
    //    console.log(mv);
    // Deep matrix algebra magic, called get_quad_moment
    var tmpm = [];
    var vct = new Vect(0, 0, 0);
    for (var q = 0; q < children.length; q++) {
        ch = children[q];
        var cmpos = ch[1].cpos();
        var cmass = ch[1].mass();
        var dr = mv.subv(cmpos);
        var drdr = dr.outvp(dr);
        var drsq = dr.dotvp(dr);
        var idrsq = [ new Vect(1, 0, 0), new Vect(0, 1, 0), new Vect(0, 0, 1) ];
        idrsq = vct.mulms(idrsq, drsq);
        tmpm[q] = vct.mulms(drdr, 3);
        tmpm[q] = vct.subm(tmpm[q], idrsq);
        tmpm[q] = vct.mulms(tmpm[q], cmass);
        if (ch[0] != 1) tmpm[q] = vct.addm(tmpm[q], ch[2]);
    }
    var rs = [ [], [], [] ];
    for (q = 0; q < children.length; q++) {
        rs[0].push(tmpm[q][0]);
        rs[1].push(tmpm[q][1]);
        rs[2].push(tmpm[q][2]);
    }
    var qa = [ [ 0, 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 0 ] ];
    for (j = 0; j <= 2; j++) {
        for (q = 0; q < children.length; q++) {
            qa[j][0] += rs[j][q].x;
            qa[j][1] += rs[j][q].y;
            qa[j][2] += rs[j][q].z;
        }
    }
    var quad = [ new Vect(qa[0][0], qa[0][1], qa[0][2]), new Vect(qa[1][0], qa[1][1], qa[1][2]), new Vect(qa[2][0], qa[2][1], qa[2][2]) ];
    // End of get_quad_moment
    var new_desc = [ desc_no, new Cmass(total_mass, mv), quad, new Box(new Vect(x0, y0, z0), new Vect(dx, dy, dz)), child_pos ];
    desc[0] = new_desc;
    return desc;
}function get_force(curr_level, inter) {
    r++;
    var dr, dsq, cell_box, cell_size;
    var flags = [];
    var next_level = [], next_inds = [], this_level = [];
    for (var i = 0; i < curr_level.length; i++) {
        dr = Tree[curr_level[i][0]][1].cpos().subv(points[curr_level[i][1]][0]);
        dsq = dr.dotvp(dr);
        cell_box = Tree[curr_level[i][0]][3].size();
        cell_size = Math.max(cell_box.x, Math.max(cell_box.y, cell_box.z));
        if (cell_size >= THETA * Math.sqrt(dsq)) {
            // well_separated?
            next_inds.push(curr_level[i]);
        } else {
            this_level.push(curr_level[i]);
        }
    }
    // calculate forces
    inter += this_level.length;
    var forces = [];
    for (i = 0; i < this_level.length; i++) {
        var point = points[this_level[i][1]][1];
        // warning - sparce array!
        if (forces[point] == undefined) forces[point] = new Vect(0, 0, 0);
        var t = Tree[this_level[i][0]];
        //	forces[point] = 
        forces[point].addv(force(t[0], t[1], t[2], points[this_level[i][1]][0]));
    }
    for (i in forces) {
        if (blk_acc[i] == undefined) console.log(i);
        //	blk_acc[i] = blk_acc[i].subv(forces[i]);
        blk_acc[i].subv(forces[i]);
    }
    if (next_inds.length == 0) return inter;
    //console.log("next_inds");
    //console.log(next_inds);
    var indices = [];
    for (i = 0; i < next_inds.length; i++) {
        var kids = Tree[next_inds[i][0]][4];
        var cell_ind = next_inds[i][2];
        indices[i] = [];
        for (j = 0; j < kids.length; j++) {
            indices[i][j] = kids[j] + cell_ind;
        }
    }
    //console.log("indices");
    //console.log(indices);
    var lens = [];
    var vals = [];
    for (i = 0; i < indices.length; i++) {
        lens[i] = indices[i].length;
        for (j = 0; j < indices[i].length; j++) {
            vals.push(indices[i][j]);
        }
    }
    nested_kids = [];
    i = 0;
    // vals patition
    for (j = 0; j < lens.length; j++) {
        nested_kids[j] = [];
        for (k = 0; k < lens[j]; k++) {
            nested_kids[j][k] = vals[i++];
        }
    }
    //console.log("nested_kids");
    //console.log(nested_kids);
    for (i = 0; i < nested_kids.length; i++) {
        for (j = 0; j < nested_kids[i].length; j++) {
            next_level.push([ nested_kids[i][j], next_inds[i][1], indices[i][j] ]);
        }
    }
    //console.log("next_level");
    //console.log(next_level);
    if (r == 1) return inter;
    return get_force(next_level, inter);
}function force(d, cm, quad, ppos) {
    var acc;
    var M = cm.mass();
    var cm_pos = cm.cpos();
    var dr = cm_pos.subv(ppos);
    if (dr.x == 0 && dr.y == 0 && dr.z == 0) return dr;
    var drsq = dr.dotvp(dr);
    var drabs = Math.sqrt(drsq);
    var mrcubed = M / (drsq * drabs);
    acc = new Vect(dr.x * mrcubed, dr.y * mrcubed, dr.z * mrcubed);
    if (d == 1) return acc;
    var dr5inv = 1 / (drsq * drsq * drabs);
    var vct = new Vect(0, 0, 0);
    var quad_dr = vct.mulmv(quad, dr);
    var dr_quad_dr = dr.dotvp(quad_dr);
    var phi_quad = -2.5 * dr_quad_dr * dr5inv / drsq;
    var ai = dr.mulvs(phi_quad);
    //    acc = 
    acc.subv(ai);
    quad_dr = quad_dr.mulvs(dr5inv);
    //    acc = 
    acc.subv(quad_dr);
    return acc;
}